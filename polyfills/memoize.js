//This function takes another function fn as its argument and returns a new function that wraps fn. The returned function caches the results of previous calls to fn using a simple JavaScript object cache. The cache key is generated by JSON.stringifying the arguments passed to the function. If a matching key is found in the cache, the cached result is returned. Otherwise, fn is called and its result is stored in the cache before being returned.
function memoize(fn) {
  let cache = {};
  return function (...args) {
    let key = JSON.stringify(args);
    if (cache[key]) {
      return cache[key];
    }
    let result = fn.apply(this, args);
    cache[key] = result;
    return result;
  };
}

// A function to calculate the factorial of a number
function factorial(n) {
  if (n === 1) return 1;
  return n * factorial(n - 1);
}

// Memoized version of the factorial function
let memoizedFactorial = memoize(factorial);

// Calculating factorials
console.log(memoizedFactorial(5)); // 120
console.log(memoizedFactorial(5)); // 120 (returned from cache)
console.log(memoizedFactorial(6)); // 720


